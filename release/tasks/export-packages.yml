---
- debug: msg="ATT --  we fail fast if proper arguments go missing."

- set_fact:
    rel_set: "{{rel | default(False) }}"
    aaki_set: "{{aaki | default(False) }}"
    asak_set: "{{asak | default(False) }}"

- fail: msg="no release number -- {{rel}}"
  when: not rel_set

- fail: msg="no aws access key -- {{aaki | len}}"
  when: not aaki_set

- fail: msg="no aws secret key -- {{asak | len}}"
  when: not asak_set

- name: Install the os deps
  sudo: true
  tags: repos
  apt: pkg={{item}}
       state=present
       cache_valid_time="{{60*60*10}}"
       update_cache=yes
  with_items:
    - unzip
    - python-virtualenv
    - python-dev

- debug: msg="Let's Export the packages"

- name: opt dir
  sudo: true
  file: path=/opt state=directory

- name: work dir
  sudo: true
  file: path={{workdir}} state=directory owner=ubuntu group=ubuntu

- name: install raindance
  sudo: true
  pip: name='git+https://github.com/whitmo/raindance.git#egg=raindance' virtualenv={{workdir}}

- name: boshlite checkout
  sudo: true
  git: repo=https://github.com/cloudfoundry/bosh-lite.git
       dest=/opt/boshlite depth=1

- name: fix ownership for bosh-lite
  sudo: true
  command: chown -R ubuntu:ubuntu /opt/boshlite

- name: fetch spiff
  sudo: true
  get_url: url=https://github.com/cloudfoundry-incubator/spiff/releases/download/v1.0/spiff_linux_amd64.zip dest=/opt/spiff.zip

- name: unzip spiff
  sudo: true
  command: unzip /opt/spiff.zip chdir=/usr/bin creates=/usr/bin/spiff

- name: cf-release checkout
  sudo: true
  git: repo=https://github.com/cloudfoundry/cf-release.git
       version=v{{rel}}
       dest=/opt/cf-release
  register: cf_checkout

- name: fix ownership for cf-release
  sudo: true
  command: chown -R ubuntu:ubuntu /opt/cf-release

- name: fix ownership for packages
  sudo: true
  command: chown -R ubuntu:ubuntu {{workdir}}

- include: tasks/cf-submodules.yml
  when: cf_checkout.changed

- name: boilerplate source
  template: src=ec2-setup/bosh-boilerplate-src.sh
            dest=/home/ubuntu/.boilerplate-src.sh

- name: place boilerplate in bashrc
  lineinfile: dest=/home/ubuntu/.bashrc line=". ~/.boilerplate-src.sh"

- name: bosh_config
  sudo: true
  file: path=/home/ubuntu/.bosh_config owner=ubuntu group=ubuntu

- name: target bosh locally
  shell: "{{bp}} bosh target localhost
         executable=/bin/bash"

- name: check stemcell count
  sudo: true
  shell: ls /opt/warden/stemcells | wc -w
  register: stemcell_count

- name: upload stemcell to bosh
  shell: "{{bp}} bosh upload stemcell {{stemcell_uri}}
         executable=/bin/bash"
  when: stemcell_count.rc == 0 and stemcell_count.stdout == "0"
  async: 6000
  poll: 30

- name: check releases
  shell: "{{bp}} bosh releases | grep '| cf.*| {{rel}}' -c
          executable=/bin/bash"
  register: howmany_rel

- set_fact:
    uploaded_release_cnt: howmany_rel.stdout

- set_fact:
    do_upload_release: "{{uploaded_release_cnt | int < 2}}"

- name: upload release to bosh
  shell: "{{bp}} bosh upload release releases/cf-{{rel}}.yml
         chdir=/opt/cf-release
         executable=/bin/bash"
  when: do_upload_release | bool
  async: 1800
  poll: 40
  ignore_errors: true
  register: release_upload

- set_fact:
    already_uploaded: "{{release_upload.stderr == 'This release version has already been uploaded' or release_upload.rc == 0}}"

- fail: msg="release {{rel}} failed to upload"
  when: not already_uploaded | bool

- name: spiff up manifest
  shell: "{{bp}} ./scripts/make_manifest_spiff
         chdir=/opt/boshlite
         executable=/bin/bash"

- name: edit manifest
  replace: dest=/opt/boshlite/manifests/cf-manifest.yml
           regexp=lucid
           replace=trusty

- name: upload manifest
  shell: "{{bp}} bosh deployment /opt/boshlite/manifests/cf-manifest.yml
          executable=/bin/bash"

- name: check for packages.tar.gz
  file: path={{workdir}}/packages.tar.gz state=file
  register: pkgtgz
  ignore_errors: true

- name: grab name of bungled export
  shell: ls -1 /tmp/compiled_packages | tail -1
  register: cpcname

- set_fact:
    pkg_exists: "{{pkgtgz.state == 'file'}}"
    cpc_tgz: "{{cpcname.stdout}}"

- name: check for deployment
  shell: "{{bp}} bosh deployments | grep 'cf/{{rel}}' -c executable=/bin/bash"
  register: number_of_deployments_sh
  ignore_errors: true

- set_fact:
    number_of_deployments: "{{number_of_deployments_sh.stdout | default(0)}}"

- set_fact:
    deployed: "{{cpc_tgz | bool or pkg_exists | bool or number_of_deployments | int > 0}}"

- name: run deploy
  shell: "{{bp}} bosh -n deploy executable=/bin/bash"
  async: 2400
  poll: 50
  when: not deployed | bool
  ignore_errors: true
  register: deploy_result

- name: run export
  shell: "{{bp}} bosh export compiled_packages cf/{{rel}} bosh-warden-boshlite-ubuntu-trusty-go_agent/3 {{workdir}}
         executable=/bin/bash"
  async: 600
  poll: 50
  when: not cpc_tgz and not {{pkg_exists | bool}}

- name: grab name of export
  shell: ls -1 /tmp/compiled_packages | tail -1
  register: cpcname

- set_fact:
    cpc_tgz: "{{cpcname.stdout}}"

- name: delete downloaded export tgz
  shell: rm /opt/packages/cf-{{rel}}*.tgz
  ignore_errors: true

- name: delete deployment
  shell: "{{bp}} bosh -n delete deployment cf-warden executable=/bin/bash"
  ignore_errors: true

- name: place file
  sudo: true
  command: cp /tmp/compiled_packages/{{cpc_tgz}} {{workdir}}/packages.tar.gz creates={{workdir}}/packages.tar.gz

- name: fix ownership
  sudo: true
  file: path={{workdir}}/packages.tar.gz owner=ubuntu group=ubuntu

- name: process export
  shell: "{{bp}} rd -p /opt/cf-release pack-jobs --workdir={{workdir}}/out {{workdir}}/packages.tar.gz
          executable=/bin/bash"

- name: upload jobs to s3
  shell: "{{bp}} s3-paraput
          --content-type=application/x-tar
          --grant=public-read
          --prefix=cf-{{rel}}/amd64
          --bucket=cf-compiled-packages
          ./
          chdir={{workdir}}/out/artefacts
          executable=/bin/bash"
